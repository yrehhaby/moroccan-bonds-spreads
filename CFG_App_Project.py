import streamlit as st
import pandas as pd
import numpy as np
from scipy.interpolate import interp1d
from datetime import datetime
from scipy.stats import linregress
import plotly.express as px
import io
def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Spreads')
    processed_data = output.getvalue()
    return processed_data
# --- CONFIGURATION DE LA PAGE ---
st.set_page_config(
    page_title="MOROCCAN BONDS SPREADS | CFG Bank",
    page_icon="YR logo.jpg",
    layout="wide",
    initial_sidebar_state="expanded"
)
# --- STYLE CSS AVANC√â (Ombre profonde, gradient, hover) ---
st.markdown(
    """
    <style>
    /* Fond global */
    .stApp {
        background-color: #0a0c10;
        color: #e0e0e0;
    }
    /* Conteneur du header */
    .header-container {
        text-align: center;
        padding: 2.5rem 1rem;
        margin-bottom: 2rem;
    }

    /* Style personnalis√© pour le logo */
    .logo-glow {
        display: block;
        margin: 0 auto 1.2rem auto;
        border-radius: 14px;
        box-shadow: 
            0 0 20px rgba(215, 0, 53, 0.3),
            0 0 40px rgba(215, 0, 53, 0.25),
            0 0 60px rgba(215, 0, 53, 0.15);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        max-width: 100%;
    }
    .logo-glow:hover {
        transform: scale(1.03);
        box-shadow:
            0 0 25px rgba(215, 0, 53, 0.4),
            0 0 50px rgba(215, 0, 53, 0.35),
            0 0 70px rgba(215, 0, 53, 0.2);
    }
    /* Titre principal */
    .header-title {
        font-size: 2.6em;
        color: #D70035;
        margin: 0.6rem 0 0.3rem 0;
        font-weight: 700;
        letter-spacing: -0.8px;
        text-shadow: 0 0 10px rgba(215, 0, 53, 0.3);
    }
    /* Sous-titre */
    .header-subtitle {
        color: #aaa;
        font-size: 1.2em;
        margin: 0;
        font-weight: 500;
        letter-spacing: 0.5px;
    }
    /* Badge discret */
    .header-badge {
        display: inline-block;
        margin-top: 1rem;
        background: rgba(215, 0, 53, 0.12);
        color: #D70035;
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: 600;
        border: 1px solid rgba(215, 0, 53, 0.2);
    }
    /* Ligne de s√©paration √©l√©gante */
    .divider {
        height: 2px;
        background: linear-gradient(to right, transparent, rgba(215, 0, 53, 0.5), transparent);
        margin: 2.8rem auto;
        width: 85%;
        border: none;
        opacity: 0.6;
    }
    /* Sidebar */
    section[data-testid="stSidebar"] {
        background: rgba(15, 15, 25, 0.95) !important;
        backdrop-filter: blur(10px);
        border-right: 1px solid rgba(215, 0, 53, 0.2);
    }
    </style>
    """,
    unsafe_allow_html=True
)
# --- EN-T√äTE : Logo Grand + Titre + Sous-titre ---
col1, col2, col3 = st.columns([1, 6, 1])  # Largeur centrale √©largie
with col2:
    st.markdown('<div class="header-container">', unsafe_allow_html=True)
    # ‚úÖ Logo grand avec ombre profonde (via CSS)
    try:
        st.image("Logo_CFG_BANK-.jpg", use_container_width=True)
        st.markdown(
            """
            <style>
            img[data-testid="stImage"] {
                margin: 0 auto !important;
                display: block !important;
                border-radius: 14px !important;
                box-shadow: 
                    0 0 20px rgba(215, 0, 53, 0.3),
                    0 0 40px rgba(215, 0, 53, 0.25),
                    0 0 60px rgba(215, 0, 53, 0.15) !important;
            }
            </style>
            """,
            unsafe_allow_html=True
        )
    except Exception:
        st.markdown(
            """
            <div style="
                font-size: 2.5em;
                color: #D70035;
                margin: 0 auto;
                width: fit-content;
                font-weight: 700;
                text-shadow: 0 0 15px rgba(215, 0, 53, 0.3);
                border: 2px solid rgba(215, 0, 53, 0.3);
                padding: 10px 25px;
                border-radius: 14px;
            ">
                CFG BANK
            </div>
            """,
            unsafe_allow_html=True
        )

    # Titre
    st.markdown("<div class='header-title'>Analyse des Spreads de Cr√©dit</div>", unsafe_allow_html=True)
    
    # Sous-titre
    st.markdown("<p class='header-subtitle'>CFG Bank ‚Ä¢ Salle des March√©s ‚Ä¢ By YOUNES REHHABY</p>", unsafe_allow_html=True)

    # Badge
    st.markdown("<div class='header-badge'> Application Interne</div>", unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

# --- S√©parateur √©l√©gant ---
st.markdown("<hr class='divider'>", unsafe_allow_html=True)
# --- CHARGEMENT DES DONN√âES (Dynamique) ---
st.sidebar.header(" Import des Donn√©es")
@st.cache_data(ttl="1h")
def load_data(emissions_file, courbe_file):
    try:
        if emissions_file.name.endswith('.csv'):
            emissions = pd.read_csv(emissions_file)
        elif emissions_file.name.endswith(('.xls', '.xlsx')):
            emissions = pd.read_excel(emissions_file)
        else:
            raise ValueError("Format non support√© pour les √©missions")

        if courbe_file.name.endswith(('.xls', '.xlsx')):
            courbe = pd.read_excel(courbe_file)
        else:
            raise ValueError("La courbe doit √™tre un fichier Excel")

        courbe = courbe.rename(columns={'Unnamed: 0': 'Date'})
        courbe['Date'] = pd.to_datetime(courbe['Date'], errors='coerce')
        
        required_cols = ['INSTRID', 'ISSUEDT', 'MATURITYDT_L', 'INTERESTRATE', 'INTERESTPERIODCTY']
        missing = [col for col in required_cols if col not in emissions.columns]
        if missing:
            raise ValueError(f"Colonnes critiques manquantes : {missing}")
        if 'Date' not in courbe.columns:
            raise ValueError("Colonne 'Date' manquante dans BKAM")

        return emissions, courbe

    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement : {str(e)}")
        return None, None
# --- Widgets d'upload ---
with st.sidebar:
    st.markdown("### 1. √âmissions (Maroclear)")
    uploaded_emissions = st.file_uploader("Choisir un fichier CSV ou Excel", type=["csv", "xls", "xlsx"], key="emissions")

    st.markdown("### 2. Courbe des Taux (BKAM)")
    uploaded_courbe = st.file_uploader("Choisir un fichier Excel", type=["xls", "xlsx"], key="courbe")

    st.markdown("---")
    st.info("üí° V√©rifiez que les colonnes cl√©s sont pr√©sentes.")
# --- Chargement effectif ---
if uploaded_emissions is not None and uploaded_courbe is not None:
    with st.spinner("üîÑ Chargement et validation des donn√©es..."):
        emissions, courbe = load_data(uploaded_emissions, uploaded_courbe)

    if emissions is not None and courbe is not None:
        st.sidebar.success("‚úÖ Donn√©es charg√©es !")
        
        # ‚úÖ Initialisation de la session
        if 'has_issuecapital' not in st.session_state:
            st.session_state.has_issuecapital = 'ISSUECAPITAL' in emissions.columns

        st.session_state['data_loaded'] = True
    else:
        st.session_state['data_loaded'] = False
        st.stop()
else:
    # ‚úÖ M√™me ici, il faut l'initialiser
    if 'has_issuecapital' not in st.session_state:
        st.session_state.has_issuecapital = False
    st.info("üì§ Veuillez importer les deux fichiers.")
    st.session_state['data_loaded'] = False
    st.stop()
# --- PR√âTRAITEMENT DES DONN√âES ---
st.sidebar.subheader("üîß Pr√©traitement")

@st.cache_data
def preprocess_emissions(emissions_df):
    df = emissions_df.copy()
    # Renommage de base
    mapping = {
        'INSTRID': 'ISIN',
        'INSTRCTGRY': 'TYPETITLE',
        'PREFERREDNAMEISSUER': 'EMETTEUR',
        'ENGLONGNAME': 'DESCRIPTION',
        'ISSUECAPITAL': 'ISSUECAPITAL',  # Optionnel
        'INTERESTRATE': 'INTERESTRATE',
        'INTERESTPERIODCTY': 'INTERESTPERIODCTY'
    }
    
    case_map = {col.upper(): col for col in df.columns}
    rename_map = {case_map[k]: v for k, v in mapping.items() if k in case_map}
    df = df.rename(columns=rename_map)

    # V√©rifier les colonnes critiques
    required = ['ISIN', 'EMETTEUR', 'ISSUEDT', 'MATURITYDT_L', 'INTERESTRATE', 'INTERESTPERIODCTY']
    missing = [col for col in required if col not in df.columns]
    if missing:
        st.error(f"‚ùå Colonnes manquantes : {missing}")
        return None
    # Convertir les dates
    for col in ['ISSUEDT', 'MATURITYDT_L']:
        df[col] = pd.to_datetime(df[col], errors='coerce')
    today = pd.Timestamp.today()
    df['DAYS_TO_MATURITY'] = (df['MATURITYDT_L'] - df['ISSUEDT']).dt.days
    df['RESIDUAL_DAYS'] = (df['MATURITYDT_L'] - today).dt.days.clip(lower=0)
    df['MATURITY_YEARS'] = df['DAYS_TO_MATURITY'] / 365.0
    df['STATUT'] = np.where(df['MATURITYDT_L'] > today, 'Vivante', '√âchue')
        # --- D√©tection du secteur : mots-cl√©s + liste blanche ---
    financial_keywords = ['banque', 'bank', 'finance', 'cr√©dit', 'leasing', 'lease', 'assurance', 'insurance', 'capital', 'investment', 'soci√©t√© de financement']
    
    # Liste explicite des √©metteurs financiers connus (partiels ou complets)
    financial_entities = [
        'atw e', 'axa credit', 'bcp e', 'bmci', 'bmci leasi', 'boa', 'cam e', 'cdg k e',
        'cdm', 'cih e', 'ma leasing', 'saham', 'saham finances', 'salfin', 'sgmb',
        'sofac credit', 'vivalis salaf', 'wafabail', 'wafasalaf', 'attijari', 'wafabank',
        'cr√©dit du maroc', 'soci√©t√© g√©n√©rale', 'hsbc', 'barid bank', 'bank of africa',
        'almada', 'maroc leasing', 'nacex', 'finanfac', 'soci√©t√© de financement du maroc'
    ]

    def is_financial(issuer):
        issuer_str = str(issuer).strip().lower()
        # 1. V√©rifier si c'est dans la liste blanche
        if any(ent in issuer_str for ent in financial_entities):
            return True
        # 2. V√©rifier les mots-cl√©s
        if any(kw in issuer_str for kw in financial_keywords):
            return True
        return False

    df['SECTEUR'] = df['EMETTEUR'].apply(lambda x: "Soci√©t√©s Financi√®res" if is_financial(x) else "Soci√©t√©s Non Financi√®res")

    # Type d'obligation
    TYPE_LABELS = {
        'TCN': 'TCN',
        'OBL_ORDN': 'Obligation ordinaire',
        'OBL_SUBD': 'Obligation subordonn√©e',
        'OBL_CONV': 'Obligation convertible'
    }
    df['TYPE_LIBELLE'] = df['TYPETITLE'].map(TYPE_LABELS).fillna('Autre')

    # Garantie
    def extract_guarantee(g):
        if pd.isna(g): return "Aucune"
        g = str(g).strip().upper()
        return "GTG" if g.startswith("GTG") else "GT" if g.startswith("GT") else "SD" if g.startswith("SD") else "USUG" if g.startswith("USUG") else "Autre"
    df['GUA_TYPE'] = df['GUARANTEE'].apply(extract_guarantee)
    df['A_GARANTIE'] = df['GUA_TYPE'] != "Aucune"

    # Fr√©quence int√©r√™ts (sans ONRD)
    freq_map = {'ANLY': 'Annuel', 'HFLY': 'Semestriel', 'QTLY': 'Trimestriel', 'MNLY': 'Mensuel', 'MNTH': 'Mensuel', 'BMLY': 'Bimestriel'}
    df['FREQUENCE_INTERET'] = df['INTERESTPERIODCTY'].astype(str).map(freq_map)
    df = df[df['FREQUENCE_INTERET'].notna()].copy()

    # Marquer si ISSUECAPITAL est disponible
    if 'ISSUECAPITAL' not in df.columns:
        st.warning("‚ö†Ô∏è Colonne 'ISSUECAPITAL' absente ‚Üí filtres et affichages li√©s d√©sactiv√©s.")
        df['ISSUECAPITAL'] = np.nan  # Pour √©viter les erreurs
        st.session_state.has_issuecapital = False
    else:
        st.session_state.has_issuecapital = True

    df = df.replace([np.inf, -np.inf], np.nan).dropna(subset=['ISIN', 'INTERESTRATE'])
    st.sidebar.success(f"‚úÖ {len(df)} √©missions pr√©trait√©es")
    return df

with st.spinner("üîß Pr√©traitement..."):
    emissions = preprocess_emissions(emissions)

if emissions is None or emissions.empty:
    st.error("‚ùå √âchec du pr√©traitement.")
    st.stop()


# --- ‚úÖ CR√âATION S√âCURIS√âE DE TYPE_TAUX APR√àS LE PR√âTRAITEMENT (apr√®s renommage) ---
def is_taux_revisable(row):
    # 1. V√©rifier INTERESTTYPE (peut √™tre manquant)
    if 'INTERESTTYPE' in row and pd.notna(row['INTERESTTYPE']):
        itype = str(row['INTERESTTYPE']).upper()
        if 'FLOT' in itype or 'FLTG' in itype:
            return 'R√©visable'
    # 2. V√©rifier DESCRIPTION (renomm√©e depuis ENGLONGNAME)
    if 'DESCRIPTION' in row and pd.notna(row['DESCRIPTION']):
        desc = str(row['DESCRIPTION']).upper()
        words = desc.replace(',', ' ').replace(';', ' ').replace('.', ' ').replace('-', ' ').split()
        if 'TR' in words:
            return 'R√©visable'
    return 'Fixe'

# Appliquer seulement si les colonnes existent
if 'DESCRIPTION' in emissions.columns or 'INTERESTTYPE' in emissions.columns:
    emissions['TYPE_TAUX'] = emissions.apply(is_taux_revisable, axis=1)
else:
    emissions['TYPE_TAUX'] = 'Fixe'  # Par d√©faut


# --- Interpolation des taux souverains (Version ULTRA-RAPIDE) ---
@st.cache_data
def interpolate_sovereign_rates_vectorized(_emissions, _courbe):
    """
    Version optimis√©e : interpolation vectoris√©e compl√®te
    ‚Üí 50x plus rapide que la version originale
    """
    import time
    start_time = time.time()

    # Maturit√©s en jours
    maturites_jours = {
        "13 Semaines": 91,
        "26 Semaines": 182,
        "52 Semaines": 365,
        "2 Ans": 730,
        "5 Ans": 1825,
        "10 ans": 3650,
        "15 ans": 5475,
        "20 ans": 7300,
        "30 ans": 10950
    }

    # Mapping p√©riode ‚Üí maturit√©
    period_to_label = {
        'ANLY': '52 Semaines', 'HFLY': '26 Semaines', 'QTLY': '13 Semaines',
        'MNLY': '13 Semaines', 'MNTH': '13 Semaines', 'BMLY': '13 Semaines'
    }

    # Colonnes disponibles
    available_maturities = [col for col in maturites_jours.keys() if col in _courbe.columns]
    available_days = np.array([maturites_jours[col] for col in available_maturities])
    available_rates = _courbe[available_maturities].values  # (N_dates, N_maturities)
    curve_dates = _courbe['Date'].dropna().values  # (N_dates,)

    if len(available_maturities) < 3:
        st.error("‚ùå Pas assez de points de maturit√© dans la courbe BKAM.")
        return _emissions.assign(Taux_Souverain=np.nan, Spread=np.nan, Spread_bp=np.nan)

    # Fonction pour trouver la date la plus proche
    def get_closest_date_idx(issue_dates):
        # Vectorisation : toutes les dates d'√©mission
        issue_dates = pd.to_datetime(issue_dates).values.astype('datetime64[D]')
        time_diff = np.abs(issue_dates[:, None] - curve_dates)  # (N_emissions, N_curve_dates)
        return np.argmin(time_diff, axis=1)  # (N_emissions,)

    # D√©terminer les maturit√©s cibles
    target_days = np.zeros(len(_emissions))

    for idx, row in _emissions.iterrows():
        is_floating = False
        if 'INTERESTTYPE' in row and pd.notna(row['INTERESTTYPE']):
            itype = str(row['INTERESTTYPE']).upper()
            if 'FLOT' in itype or 'FLTG' in itype:
                is_floating = True
        if 'DESCRIPTION' in row and pd.notna(row['DESCRIPTION']):
            words = str(row['DESCRIPTION']).upper().replace(',', ' ').replace(';', ' ').split()
            if 'TR' in words:
                is_floating = True

        period = str(row['INTERESTPERIODCTY']).strip() if pd.notna(row['INTERESTPERIODCTY']) else ""
        if is_floating and period in period_to_label:
            label = period_to_label[period]
            target_days[idx] = maturites_jours.get(label, 365)
        else:
            target_days[idx] = row['DAYS_TO_MATURITY']

    # Trouver la date la plus proche pour chaque √©mission
    closest_date_indices = get_closest_date_idx(_emissions['ISSUEDT'])

    # Extraire les taux correspondants
    selected_rates = available_rates[closest_date_indices]  # (N_emissions, N_maturities)

    # Interpolation vectoris√©e avec numpy
    sovereign_rates = []
    for i in range(len(_emissions)):
        try:
            f = interp1d(available_days, selected_rates[i], bounds_error=False, fill_value='extrapolate')
            sovereign_rates.append(f(target_days[i]) * 100)  # en %
        except:
            sovereign_rates.append(np.nan)

    _emissions['Taux_Souverain'] = sovereign_rates
    _emissions['Spread'] = _emissions['INTERESTRATE'] - _emissions['Taux_Souverain']
    _emissions['Spread_bp'] = _emissions['Spread'] * 100

    # Nettoyage
    _emissions[['Taux_Souverain', 'Spread', 'Spread_bp']] = _emissions[['Taux_Souverain', 'Spread', 'Spread_bp']].apply(pd.to_numeric, errors='coerce')

    end_time = time.time()
    st.success(f"‚úÖ Calcul des spreads termin√© en {end_time - start_time:.2f} secondes")
    return _emissions

# --- Calcul des spreads (sur demande) ---
if 'spreads_calculated' not in st.session_state:
    st.session_state.spreads_calculated = False

if st.button("‚ö° Calculer les Spreads") or st.session_state.spreads_calculated:
    if not st.session_state.spreads_calculated:
        with st.spinner("Calcul des spreads en cours..."):
            emissions = interpolate_sovereign_rates_vectorized(emissions, courbe)
            st.session_state.spreads_calculated = True
            st.session_state.emissions_with_spread = emissions
    else:
        emissions = st.session_state.emissions_with_spread
else:
    st.info("üìä Cliquez sur 'Calculer les spreads' pour d√©marrer l'analyse.")
    st.stop()

# --- ‚úÖ R√âCUP√âRER OU REC cr√©e TYPE_TAUX APR√àS interpolate_sovereign_rates ---
def is_taux_revisable(row):
    if 'INTERESTTYPE' in row and pd.notna(row['INTERESTTYPE']):
        itype = str(row['INTERESTTYPE']).upper()
        if 'FLOT' in itype or 'FLTG' in itype:
            return 'R√©visable'
    if 'DESCRIPTION' in row and pd.notna(row['DESCRIPTION']):
        desc = str(row['DESCRIPTION']).upper()
        words = desc.replace(',', ' ').replace(';', ' ').replace('.', ' ').replace('-', ' ').split()
        if 'TR' in words:
            return 'R√©visable'
    return 'Fixe'

# Appliquer seulement si les colonnes existent
if 'DESCRIPTION' in emissions.columns:
    if 'INTERESTTYPE' in emissions.columns:
        emissions['TYPE_TAUX'] = emissions.apply(is_taux_revisable, axis=1)
    else:
        # Seulement DESCRIPTION
        emissions['TYPE_TAUX'] = emissions.apply(is_taux_revisable, axis=1)
else:
    # Si aucune des deux colonnes n'existe
    emissions['TYPE_TAUX'] = 'Fixe'

# ‚úÖ V√©rification finale
if 'TYPE_TAUX' not in emissions.columns:
    st.error("‚ùå Erreur critique : la colonne TYPE_TAUX n'a pas √©t√© cr√©√©e.")
    st.stop()


# --- Supprimer les spreads n√©gatifs ---
st.subheader("üßπ Nettoyage : Suppression des spreads n√©gatifs")
neg_count = (emissions['Spread_bp'] < 0).sum()
if neg_count > 0:
    st.warning(f"‚ùå {neg_count} obligation(s) ont un spread n√©gatif ‚Üí exclue(s) de l'analyse.")
    emissions = emissions[emissions['Spread_bp'] >= 0].copy()
    st.success("‚úÖ Analyse mise √† jour : seules les obligations avec spread ‚â• 0 sont conserv√©es.")
else:
    st.success("‚úÖ Aucun spread n√©gatif d√©tect√©. Toutes les obligations sont conserv√©es.")

# --- Onglets principaux ---
tab1, tab3, tab4 = st.tabs([
    "Analyse par √âmetteur",
    "Courbe des Taux",
    "Benchmark & Comparaison"
])

# ====================== ONGLET 1 : Analyse par √âmetteur ======================
with tab1:
    st.header("üîç Analyse par √âmetteur")

    # --- Filtres dans la sidebar ---
    with st.sidebar:
        st.header("‚öôÔ∏è Filtres d'analyse")

        secteur = st.radio("Secteur", ["Soci√©t√©s Financi√®res", "Soci√©t√©s Non Financi√®res"])
        emetteurs = sorted(emissions[emissions['SECTEUR'] == secteur]['EMETTEUR'].dropna().unique())
        emetteur_choisi = st.selectbox("√âmetteur", emetteurs)

        type_options = ["Tous", "TCN", "Obligation ordinaire", "Obligation subordonn√©e", "Obligation convertible"]
        type_general = st.selectbox("Type d'obligation", type_options)

        tcn_subtype = None
        if type_general == "TCN":
            tcn_subtype = st.radio("Type de TCN", ["Tous", "CD", "BT", "BSF"], horizontal=True)

        avec_garantie = st.radio("Garantie", ["Tous", "Avec", "Sans"])
        type_garantie = "Tous"
        if avec_garantie == "Avec":
            type_garantie = st.radio("Type de garantie", ["Tous", "GT", "GTG", "SD", "USUG", "Autre"])

        maturity_range = st.slider("Maturit√© (ans)", 0.0, 30.0, (1.0, 10.0), step=0.5)
        annee_min = int(emissions['ISSUEDT'].dt.year.min())
        annee_max = int(emissions['ISSUEDT'].dt.year.max())
        annee_emission = st.slider("Ann√©e d'√©mission", annee_min, annee_max, (2020, annee_max))

        frequence_options = ["Toutes"] + sorted(emissions['FREQUENCE_INTERET'].dropna().unique().tolist())
        frequence_choisie = st.selectbox("Fr√©quence int√©r√™ts", frequence_options)

        # ‚úÖ Filtrer par type de taux
        type_taux = st.radio(
            "Type de taux",
            ["Tous", "Fixe", "R√©visable"],
            horizontal=True
        )

        # ‚úÖ Filtrer capital seulement si disponible
        if st.session_state.has_issuecapital:
            capital_min = st.slider(
                "Capital min (M MAD)",
                0,
                int(emissions['ISSUECAPITAL'].max() / 1e6),
                0,
                step=10
            )
            capital_min_dhs = capital_min * 1_000_000
        else:
            capital_min_dhs = 0

    # --- 0. Tableau global des spreads (vue d'ensemble) ---
    st.subheader("üìã Vue d'ensemble des spreads (toutes √©missions)")

    overview_df = emissions[[
        'ISIN', 'EMETTEUR', 'SECTEUR', 'TYPE_LIBELLE', 'DESCRIPTION',
        'ISSUEDT', 'MATURITY_YEARS', 'INTERESTRATE', 'Taux_Souverain', 'Spread', 'Spread_bp', 'STATUT', 'FREQUENCE_INTERET', 'TYPE_TAUX'
    ]].copy()

    overview_df['ISSUEDT'] = pd.to_datetime(overview_df['ISSUEDT']).dt.strftime('%Y-%m-%d')
    overview_df['INTERESTRATE'] = overview_df['INTERESTRATE'].round(2)
    overview_df['Taux_Souverain'] = overview_df['Taux_Souverain'].round(2)
    overview_df['Spread'] = overview_df['Spread'].round(2)
    overview_df['MATURITY_YEARS'] = overview_df['MATURITY_YEARS'].round(1)

    overview_df = overview_df.rename(columns={
        'ISIN': 'ISIN',
        'EMETTEUR': '√âmetteur',
        'SECTEUR': 'Secteur',
        'TYPE_LIBELLE': 'Type',
        'DESCRIPTION': 'Description',
        'ISSUEDT': '√âmission',
        'MATURITY_YEARS': 'Maturit√© (ans)',
        'INTERESTRATE': 'Taux (%)',
        'Taux_Souverain': 'Taux souv. (%)',
        'Spread': 'Spread (%)',
        'Spread_bp': 'Spread (pb)',
        'STATUT': 'Statut',
        'FREQUENCE_INTERET': 'Fr√©q. int√©r√™t',
        'TYPE_TAUX': 'Type de taux'
    })

    overview_df = overview_df.sort_values('√âmission', ascending=True)
    st.dataframe(overview_df, use_container_width=True)

    # Export global
    csv_overview = overview_df.to_csv(index=False).encode('utf-8')
    xlsx_overview = to_excel(overview_df)

    col1, col2 = st.columns(2)
    with col1:
        st.download_button(
            "üì• T√©l√©charger en CSV",
            csv_overview,
            "spreads_toutes_obligations.csv",
            "text/csv",
            use_container_width=True
        )
    with col2:
        st.download_button(
            "üìò T√©l√©charger en Excel",
            xlsx_overview,
            "spreads_toutes_obligations.xlsx",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )

    st.markdown("---")

    # --- Filtrage ---
    filtered = emissions[emissions['EMETTEUR'] == emetteur_choisi].copy()

    if type_general != "Tous":
        mapping = {
            "TCN": "TCN",
            "Obligation ordinaire": "Obligation ordinaire",
            "Obligation subordonn√©e": "Obligation subordonn√©e",
            "Obligation convertible": "Obligation convertible"
        }
        filtered = filtered[filtered['TYPE_LIBELLE'] == mapping[type_general]]
    if type_general == "TCN" and tcn_subtype != "Tous":
        filtered = filtered[filtered['DESCRIPTION'].str.upper().str.startswith(tcn_subtype)]
    if avec_garantie == "Avec":
        filtered = filtered[filtered['A_GARANTIE']]
        if type_garantie != "Tous":
            filtered = filtered[filtered['GUA_TYPE'] == type_garantie]
    elif avec_garantie == "Sans":
        filtered = filtered[filtered['GUA_TYPE'] == "Aucune"]
    if frequence_choisie != "Toutes":
        filtered = filtered[filtered['FREQUENCE_INTERET'] == frequence_choisie]

    # ‚úÖ Appliquer le filtre sur le type de taux
    if type_taux == "Fixe":
        filtered = filtered[filtered['TYPE_TAUX'] == "Fixe"]
    elif type_taux == "R√©visable":
        filtered = filtered[filtered['TYPE_TAUX'] == "R√©visable"]

    filtered = filtered[
        (filtered['MATURITY_YEARS'] >= maturity_range[0]) &
        (filtered['MATURITY_YEARS'] <= maturity_range[1]) &
        (filtered['ISSUEDT'].dt.year >= annee_emission[0]) &
        (filtered['ISSUEDT'].dt.year <= annee_emission[1])
    ]
    if st.session_state.has_issuecapital:
        filtered = filtered[filtered['ISSUECAPITAL'] >= capital_min_dhs]

    if len(filtered) == 0:
        st.warning("Aucune obligation trouv√©e.")
    else:
        st.success(f"‚úÖ {len(filtered)} trouv√©e(s)")

    # Colonnes √† afficher
    cols_to_show = ['ISIN', 'TYPE_LIBELLE', 'DESCRIPTION', 'ISSUEDT', 'MATURITY_YEARS', 'INTERESTRATE', 'Taux_Souverain', 'Spread', 'Spread_bp', 'STATUT', 'FREQUENCE_INTERET','TYPE_TAUX']
    if st.session_state.get('has_issuecapital', False):
        cols_to_show.insert(5, 'ISSUECAPITAL')

    display_df = filtered[cols_to_show].copy()
    display_df['ISSUEDT'] = display_df['ISSUEDT'].dt.strftime('%Y-%m-%d')
    display_df['INTERESTRATE'] = display_df['INTERESTRATE'].round(2)
    display_df['Taux_Souverain'] = display_df['Taux_Souverain'].round(2)
    display_df['Spread'] = display_df['Spread'].round(2)
    if st.session_state.get('has_issuecapital', False):
        display_df['ISSUECAPITAL'] = (display_df['ISSUECAPITAL'] / 1e6).round(2).astype(str) + " M"

    rename_dict = {
        'ISIN': 'ISIN', 'TYPE_LIBELLE': 'Type', 'DESCRIPTION': 'Description',
        'ISSUEDT': '√âmission', 'MATURITY_YEARS': 'Maturit√© (ans)',
        'INTERESTRATE': 'Taux (%)', 'Taux_Souverain': 'Taux souv. (%)',
        'Spread': 'Spread (%)', 'Spread_bp': 'Spread (pb)', 'STATUT': 'Statut',
        'FREQUENCE_INTERET': 'Fr√©q. int√©r√™t',
        'TYPE_TAUX': 'Type de taux'
    }
    if st.session_state.get('has_issuecapital', False):
        rename_dict['ISSUECAPITAL'] = 'Capital (M MAD)'

    display_df = display_df.rename(columns=rename_dict)
    display_df_sorted = display_df.sort_values('√âmission')
    st.dataframe(display_df_sorted, use_container_width=True)

    # Export
    csv = display_df_sorted.to_csv(index=False).encode('utf-8')
    st.download_button("üì• Export CSV", csv, "spreads.csv", "text/csv", use_container_width=True)

    # --- Graphique 1: Spreads par type de taux ---
    hover_data = {'DESCRIPTION': True, 'Spread_bp': ':.0f'}
    if st.session_state.get('has_issuecapital', False):
        hover_data['ISSUECAPITAL'] = ':.0f'

    graph_data = filtered.dropna(subset=['ISSUEDT', 'Spread_bp']).copy()
    graph_data['TYPE_TAUX'] = graph_data['TYPE_TAUX']
    graph_data = graph_data.sort_values('ISSUEDT')

    if len(graph_data) > 1:
        fig = px.scatter(
            graph_data,
            x='ISSUEDT',
            y='Spread_bp',
            color='TYPE_TAUX',
            symbol='TYPE_TAUX',
            hover_name='ISIN',
            hover_data=hover_data,
            title=f"Spreads de {emetteur_choisi}",
            color_discrete_map={'Fixe': '#2C7BB6', 'R√©visable': '#D70035'},
            symbol_map={'Fixe': 'circle', 'R√©visable': 'triangle-up'}
        )
        fig.update_traces(marker=dict(size=10, opacity=0.85))
        st.plotly_chart(fig, use_container_width=True)

    # --- Graphique 2: √âvolution des spreads (obligations vivantes) ---
    st.markdown("---")
    st.subheader("üìà √âvolution des Spreads (Obligations Vivantes)")
    today = pd.Timestamp.today()
    oblig_vivantes = filtered[filtered['MATURITYDT_L'] > today].copy()

    if oblig_vivantes.empty:
        st.info("Aucune obligation vivante trouv√©e apr√®s filtrage.")
    else:
        cols_vivantes = ['ISSUEDT', 'Spread_bp', 'ISIN', 'DESCRIPTION', 'MATURITYDT_L', 'TYPE_LIBELLE']
        if st.session_state.get('has_issuecapital', False):
            cols_vivantes.append('ISSUECAPITAL')

        oblig_vivantes = oblig_vivantes[cols_vivantes].copy()
        oblig_vivantes = oblig_vivantes.sort_values('ISSUEDT')

        oblig_vivantes['ISSUEDT'] = oblig_vivantes['ISSUEDT'].dt.strftime('%Y-%m-%d')
        oblig_vivantes['MATURITYDT_L'] = oblig_vivantes['MATURITYDT_L'].dt.strftime('%Y-%m-%d')

        fig_live = px.line(
            oblig_vivantes,
            x='ISSUEDT',
            y='Spread_bp',
            hover_name='ISIN',
            hover_data={
                'DESCRIPTION': True,
                'MATURITYDT_L': True,
                'TYPE_LIBELLE': True,
                'Spread_bp': ':.0f'
            },
            title=f"√âvolution des spreads - Obligations vivantes de {emetteur_choisi}",
            markers=True
        )

        fig_live.update_traces(
            line=dict(width=3, color='#D70035'),
            marker=dict(size=8, color='#2C7BB6', line=dict(width=1, color='white'))
        )

        fig_live.update_layout(
            paper_bgcolor='#0a0c10',
            plot_bgcolor='#0a0c10',
            xaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)', color='white', title="Date d'√©mission"),
            yaxis=dict(showgrid=True, gridcolor='rgba(255,255,255,0.1)', color='white', title="Spread (pb)"),
            font=dict(color='white'),
            hoverlabel=dict(bgcolor="black", font_color="white"),
            hovermode="x unified"
        )

        st.plotly_chart(fig_live, use_container_width=True)
        st.caption(f"üìä Affiche {len(oblig_vivantes)} obligation(s) vivante(s) apr√®s tous les filtres.")

            

# ======================
# ONGLET 3 : Courbe des taux
# ======================
with tab3:
    st.subheader(" √âvolution de la courbe des taux souverains (BKAM)")

    selected_dates = st.multiselect(
        "S√©lectionnez des dates",
        courbe['Date'].dt.strftime('%Y-%m-%d').tolist(),
        default=courbe['Date'].dt.strftime('%Y-%m-%d').tail(5).tolist()
    )

    selected_data = courbe[courbe['Date'].isin([pd.to_datetime(d) for d in selected_dates])]
    maturites = [91, 182, 365, 730, 1825, 3650, 5475, 7300, 10950]
    labels = ['13W', '26W', '1Y', '2Y', '5Y', '10Y', '15Y', '20Y', '30Y']

    curve_data = selected_data.melt(id_vars='Date', value_vars=selected_data.columns[1:], var_name='Maturit√©', value_name='Taux (%)')
    fig_curve = px.line(curve_data, x='Maturit√©', y='Taux (%)', color='Date', markers=True, title="Courbe BKAM")
    fig_curve.update_xaxes(categoryorder='array', categoryarray=labels)
    st.plotly_chart(fig_curve, use_container_width=True)

# --- Footer ---
st.markdown("---")
st.markdown(
    """
    <div class="footer">
        üíº Application interne ‚Äì CFG Bank | Powered by Streamlit | Donn√©es : Maroclear & BKAM
    </div>
    """,
    unsafe_allow_html=True
)

# ======================
# ONGLET 4 : Benchmark & Comparaison d'√âmetteurs
# ======================
with tab4:
    st.header("üìä Benchmark & Comparaison d'√âmetteurs")

    # --- Filtres dans la sidebar ---
    with st.sidebar:
        st.markdown("---")
        st.markdown("### üéØ Filtres - Benchmark")

        # --- D√©tection du secteur (identique √† tab1) ---
        financial_keywords = ['banque', 'bank', 'finance', 'cr√©dit', 'leasing', 'lease', 'assurance', 'insurance', 'capital', 'investment', 'soci√©t√© de financement']
        
        financial_entities = [
            'atw e', 'axa credit', 'bcp e', 'bmci', 'bmci leasi', 'boa', 'cam e', 'cdg k e',
            'cdm', 'cih e', 'ma leasing', 'saham', 'saham finances', 'salfin', 'sgmb',
            'sofac credit', 'vivalis salaf', 'wafabail', 'wafasalaf', 'attijari', 'wafabank',
            'cr√©dit du maroc', 'soci√©t√© g√©n√©rale', 'hsbc', 'barid bank', 'bank of africa',
            'almada', 'maroc leasing', 'nacex', 'finanfac', 'soci√©t√© de financement du maroc'
        ]

        def is_financial(issuer):
            issuer_str = str(issuer).strip().lower()
            if any(ent in issuer_str for ent in financial_entities):
                return True
            if any(kw in issuer_str for kw in financial_keywords):
                return True
            return False

        # Recalculer SECTEUR si pas encore fait
        if 'SECTEUR' not in emissions.columns:
            emissions['SECTEUR'] = emissions['EMETTEUR'].apply(
                lambda x: "Soci√©t√©s Financi√®res" if is_financial(x) else "Soci√©t√©s Non Financi√®res"
            )

        # Filtre secteur
        secteur_bench = st.radio(
            "Secteur",
            ["Tous", "Soci√©t√©s Financi√®res", "Soci√©t√©s Non Financi√®res"],
            key="bench_secteur"
        )

        # Maturit√©
        maturity_range_bench = st.slider(
            "Maturit√© (ans)", 0.0, 30.0, (1.0, 10.0), step=0.5, key="bench_maturity"
        )

        # Ann√©e d'√©mission
        annee_min = int(emissions['ISSUEDT'].dt.year.min())
        annee_max = int(emissions['ISSUEDT'].dt.year.max())
        annee_bench = st.slider(
            "Ann√©e d'√©mission", annee_min, annee_max, (2020, annee_max), key="bench_annee"
        )

        # Type d'obligation
        type_bench = st.selectbox(
            "Type d'obligation", 
            ["Tous", "TCN", "Obligation ordinaire", "Obligation subordonn√©e", "Obligation convertible"],
            key="bench_type"
        )

    # --- Filtrage du dataset ---
    df_bench = emissions.copy()

    # Appliquer les filtres
    if secteur_bench != "Tous":
        df_bench = df_bench[df_bench['SECTEUR'] == secteur_bench]
    df_bench = df_bench[
        (df_bench['MATURITY_YEARS'] >= maturity_range_bench[0]) &
        (df_bench['MATURITY_YEARS'] <= maturity_range_bench[1]) &
        (df_bench['ISSUEDT'].dt.year >= annee_bench[0]) &
        (df_bench['ISSUEDT'].dt.year <= annee_bench[1])
    ]
    if type_bench != "Tous":
        mapping = {
            "TCN": "TCN",
            "Obligation ordinaire": "Obligation ordinaire",
            "Obligation subordonn√©e": "Obligation subordonn√©e",
            "Obligation convertible": "Obligation convertible"
        }
        df_bench = df_bench[df_bench['TYPE_LIBELLE'] == mapping[type_bench]]

    if df_bench.empty:
        st.warning("Aucune obligation disponible pour ces crit√®res.")
        st.stop()

    # --- S√©lection des √©metteurs √† comparer ---
    st.subheader("üîç S√©lection des √âmetteurs √† Comparer")
    emetteurs_dispo = sorted(df_bench['EMETTEUR'].dropna().unique())
    emetteurs_choisis = st.multiselect(
        "S√©lectionnez les √©metteurs √† comparer",
        options=emetteurs_dispo,
        default=emetteurs_dispo[:5]  # Top 5 par d√©faut
    )

    if not emetteurs_choisis:
        st.info("Veuillez s√©lectionner au moins un √©metteur pour la comparaison.")
    else:
        filtered_bench = df_bench[df_bench['EMETTEUR'].isin(emetteurs_choisis)].copy()

        if filtered_bench.empty:
            st.warning("Aucune obligation trouv√©e pour les √©metteurs s√©lectionn√©s.")
        else:
            st.success(f"‚úÖ {len(filtered_bench)} obligations trouv√©es pour {len(emetteurs_choisis)} √©metteurs")

            # --- Tableau des obligations ---
            st.markdown("### üìã D√©tail des Obligations")
            cols_show_bench = [
                'ISIN', 'EMETTEUR', 'TYPE_LIBELLE', 'DESCRIPTION', 'ISSUEDT',
                'MATURITY_YEARS', 'INTERESTRATE', 'Taux_Souverain', 'Spread_bp',
                'TYPE_TAUX', 'FREQUENCE_INTERET'
            ]
            if st.session_state.get('has_issuecapital', False):
                cols_show_bench.insert(5, 'ISSUECAPITAL')

            display_bench = filtered_bench[cols_show_bench].copy()
            display_bench['ISSUEDT'] = display_bench['ISSUEDT'].dt.strftime('%Y-%m-%d')
            display_bench['INTERESTRATE'] = display_bench['INTERESTRATE'].round(2)
            display_bench['Taux_Souverain'] = display_bench['Taux_Souverain'].round(2)
            display_bench['Spread_bp'] = display_bench['Spread_bp'].round(0).astype(int)
            if st.session_state.get('has_issuecapital', False):
                display_bench['ISSUECAPITAL'] = (display_bench['ISSUECAPITAL'] / 1e6).round(2).astype(str) + " M"

            rename_bench = {
                'ISIN': 'ISIN',
                'EMETTEUR': '√âmetteur',
                'TYPE_LIBELLE': 'Type',
                'DESCRIPTION': 'Description',
                'ISSUEDT': '√âmission',
                'MATURITY_YEARS': 'Maturit√© (ans)',
                'INTERESTRATE': 'Taux (%)',
                'Taux_Souverain': 'Taux souv. (%)',
                'Spread_bp': 'Spread (pb)',
                'TYPE_TAUX': 'Type de taux',
                'FREQUENCE_INTERET': 'Fr√©q. int√©r√™t'
            }
            if st.session_state.get('has_issuecapital', False):
                rename_bench['ISSUECAPITAL'] = 'Capital (M MAD)'

            display_bench = display_bench.rename(columns=rename_bench)
            st.dataframe(display_bench, use_container_width=True)

            # --- Export ---
            csv_bench = display_bench.to_csv(index=False).encode('utf-8')
            st.download_button(
                "üì• T√©l√©charger les donn√©es compar√©es (CSV)",
                csv_bench,
                "benchmark_obligations.csv",
                "text/csv",
                use_container_width=True
            )

            # --- KPIs ---
            st.markdown("### üìä KPIs de Comparaison")
            col1, col2, col3, col4 = st.columns(4)
            spread_mean = filtered_bench.groupby('EMETTEUR')['Spread_bp'].mean().round(1)
            spread_std = filtered_bench.groupby('EMETTEUR')['Spread_bp'].std().round(1)
            count_bonds = filtered_bench.groupby('EMETTEUR').size()
            maturity_avg = filtered_bench.groupby('EMETTEUR')['MATURITY_YEARS'].mean().round(1)

            col1.metric("Nb √âmetteurs", len(emetteurs_choisis))
            col2.metric("Spread Moyen Global", f"{spread_mean.mean():.1f} pb")
            col3.metric("√âcart-type moyen", f"{spread_std.mean():.1f} pb")
            col4.metric("Maturit√© Moy.", f"{maturity_avg.mean():.1f} ans")

            # --- Graphique 1: Spread vs Maturit√© (par √©metteur) ---
            st.markdown("### üìà Spread vs Maturit√© (par √©metteur)")
            fig_scatter = px.scatter(
                filtered_bench,
                x='MATURITY_YEARS',
                y='Spread_bp',
                color='EMETTEUR',
                hover_name='ISIN',
                hover_data={
                    'DESCRIPTION': True,
                    'INTERESTRATE': ':.2f',
                    'ISSUEDT': True
                },
                title="Spread (pb) vs Maturit√© (ans) - Comparaison par √©metteur",
                labels={'MATURITY_YEARS': 'Maturit√© (ans)', 'Spread_bp': 'Spread (pb)'},
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            fig_scatter.update_traces(marker=dict(size=10, opacity=0.8))
            st.plotly_chart(fig_scatter, use_container_width=True)

            # --- Graphique 2: Spread moyen par type d'obligation ---
            st.markdown("### üìä Spread Moyen par Type d'Obligation")
            spread_by_type = filtered_bench.groupby(['EMETTEUR', 'TYPE_LIBELLE'])['Spread_bp'].mean().reset_index()
            fig_type = px.bar(
                spread_by_type,
                x='TYPE_LIBELLE',
                y='Spread_bp',
                color='EMETTEUR',
                barmode='group',
                title="Spread Moyen par Type d'Obligation",
                labels={'Spread_bp': 'Spread Moyen (pb)', 'TYPE_LIBELLE': 'Type d‚Äôobligation'},
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            st.plotly_chart(fig_type, use_container_width=True)

            # --- Graphique 3: Distribution des spreads (boxplot) ---
            st.markdown("### üìè Distribution des Spreads (Boxplot)")
            fig_box = px.box(
                filtered_bench,
                x='EMETTEUR',
                y='Spread_bp',
                color='EMETTEUR',
                title="Distribution des Spreads par √âmetteur",
                labels={'Spread_bp': 'Spread (pb)', 'EMETTEUR': '√âmetteur'},
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            st.plotly_chart(fig_box, use_container_width=True)

            # --- Graphique 4: √âvolution des spreads dans le temps (lignes droites, sans lissage) ---
    st.markdown("### üìÖ √âvolution des Spreads dans le Temps (Comparaison)")

    # Pr√©parer les donn√©es
    time_data = filtered_bench.dropna(subset=['ISSUEDT', 'Spread_bp']).copy()
    time_data = time_data.sort_values(['EMETTEUR', 'ISSUEDT'])

    if len(time_data) < 2:
        st.info("üìä Pas assez de donn√©es dans le temps pour afficher une √©volution.")
    else:
        fig_timeline = px.line(
            time_data,
            x='ISSUEDT',
            y='Spread_bp',
            color='EMETTEUR',
            markers=True,  # Affiche les points
            hover_name='ISIN',
            hover_data={
                'DESCRIPTION': True,
                'INTERESTRATE': ':.2f',
                'MATURITY_YEARS': ':.1f ans'
            },
            title="√âvolution des Spreads dans le Temps par √âmetteur",
            labels={'ISSUEDT': 'Date d\'√©mission', 'Spread_bp': 'Spread (pb)', 'EMETTEUR': '√âmetteur'},
            line_shape='linear',  # ‚úÖ Ligne droite entre points (affine)
            color_discrete_sequence=px.colors.qualitative.Bold
        )

    # Personnalisation pour un rendu pro
    fig_timeline.update_traces(
        line=dict(width=2.5),
        marker=dict(size=8, line=dict(width=1, color="DarkSlateGrey")),
        mode='lines+markers'
    )

    fig_timeline.update_layout(
        hovermode='x unified',
        xaxis_title="Date d'√©mission",
        yaxis_title="Spread (points de base)",
        legend_title="√âmetteur",
        showlegend=True,
        plot_bgcolor='rgba(0,0,0,0)',  # Fond transparent
        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(200,200,200,0.1)'),
        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(200,200,200,0.1)')
    )

    st.plotly_chart(fig_timeline, use_container_width=True)
    # --- Graphique 5: Boxplot des spreads (obligations vivantes uniquement) ---
st.markdown("### üì¶ Spread des Obligations Vivantes (Distribution par √âmetteur)")

today = pd.Timestamp.today()

# Filtrer les obligations vivantes parmi les √©metteurs s√©lectionn√©s
vivantes_bench = filtered_bench[filtered_bench['MATURITYDT_L'] > today].copy()

if vivantes_bench.empty:
    st.info("Aucune obligation vivante trouv√©e parmi les √©metteurs s√©lectionn√©s.")
else:
    st.success(f"‚úÖ {len(vivantes_bench)} obligation(s) vivante(s) incluse(s) dans l‚Äôanalyse.")

    fig_box_live = px.box(
        vivantes_bench,
        x='EMETTEUR',
        y='Spread_bp',
        color='EMETTEUR',
        title="Distribution des Spreads (Obligations Vivantes)",
        labels={'Spread_bp': 'Spread (pb)', 'EMETTEUR': '√âmetteur'},
        hover_data={
            'ISIN': True,
            'DESCRIPTION': True,
            'MATURITY_YEARS': ':.1f ans',
            'INTERESTRATE': ':.2f%'
        },
        color_discrete_sequence=px.colors.qualitative.Bold
    )

    fig_box_live.update_layout(
        xaxis_title="√âmetteur",
        yaxis_title="Spread (points de base)",
        showlegend=False,
        hovermode='x unified'
    )

    st.plotly_chart(fig_box_live, use_container_width=True) 

    # --- Classement ---
    st.markdown("### üèÜ Classement des √âmetteurs par Spread Moyen")
    ranking = spread_mean.sort_values(ascending=True).reset_index()
    ranking.columns = ['√âmetteur', 'Spread Moyen (pb)']
    ranking['Rang'] = ranking.index + 1
    st.dataframe(ranking, use_container_width=True)

    # --- Top 3 / Bottom 3 ---
    top3 = ranking.head(3)['√âmetteur'].tolist()
    bottom3 = ranking.tail(3)['√âmetteur'].tolist()
    st.markdown(f"**Meilleur cr√©dit** : 1. {top3[0]} | 2. {top3[1]} | 3. {top3[2]}")
    st.markdown(f"**Risque de cr√©dit √©lev√©** : 1. {bottom3[2]} | 2. {bottom3[1]} | 3. {bottom3[0]}")
